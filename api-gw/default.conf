resolver 127.0.0.11;

server {
    # TODO set origin and cookie-allowed domain whitelists
    listen       8080 default;
    server_name  ~(api\.)(?<domain>.*)$ default;

    charset utf-8;
    access_log  /var/log/nginx/access.log  main;
    error_log /var/log/nginx/error.log warn;

    add_header "Access-Control-Allow-Origin" "$http_origin" always;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE, HEAD, PATCH" always;
    add_header "Access-Control-Allow-Credentials" "true" always;
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept, X-CSRF-TOKEN" always;
    add_header "Vary" "Accept, Origin" always;
    add_header "X-Uri" "$domain" always;

    location ~* /(test1|test2)/ {
        if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
        }
        set $upstream $1;
        set $port "5000";
        proxy_pass http://$upstream:$port$uri$is_args$args;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Script-Name /$1;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        allow all;
       # auth_request /users/validate;
       # auth_request_set $auth_user_id $upstream_http_x_user_id;
       # auth_request_set $auth_group_id $upstream_http_x_group_id;
       # auth_request_set $auth_go_to_payment $upstream_http_x_go_to_payment;
       # proxy_set_header X-User-ID $auth_user_id;
       # proxy_set_header X-Group-ID $auth_group_id;
       # proxy_cookie_domain REPLACEME.NGINX $domain;
       # proxy_set_header X-Go-To-Payment $auth_go_to_payment;
    }

    location /test {
        return 200 'ok';
    }
}
